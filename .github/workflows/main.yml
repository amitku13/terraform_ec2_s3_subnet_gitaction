name: Terraform CI/CD Workflow

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: "AWS Region where resources will be deployed"
        required: true
        default: "us-east-1"
        type: choice
        options:
          - us-east-1
          - us-west-1
          - us-west-2
      action:
        description: "Choose the Terraform action (apply or destroy)"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy
      resources:
        description: "JSON string specifying which resources to create"
        required: true
        default: '{"create_vpc": false, "create_ec2": false, "create_s3": false, "create_autoscaling": false}'
      ami_id:
        description: "AMI ID for EC2 instance and Autoscaling"
        required: true
        default: "ami-0453ec754f44f9a4a"
      instance_type:
        description: "Instance type for EC2 and Autoscaling"
        required: true
        default: "t2.micro"
      subnet_id:
        description: "Subnet ID for EC2 instance"
        required: true
        default: "subnet-00c22c9ec69ab8e47"
      security_group_id:
        description: "Security Group ID for EC2 instance"
        required: true
        default: "sg-0cec77f0a31766efb"
      s3_bucket_name:
        description: "Prefix for S3 bucket name"
        required: true
        default: "example-bucket"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.aws_region }}

    - name: Parse Resource Input
      id: parse_resources
      run: |
        echo "resources=$(echo '${{ github.event.inputs.resources }}' | jq -r '.')" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="aws_region=${{ github.event.inputs.aws_region }}" \
          -var="create_vpc=$(echo ${{ env.resources }} | jq -r '.create_vpc')" \
          -var="create_ec2=$(echo ${{ env.resources }} | jq -r '.create_ec2')" \
          -var="create_s3=$(echo ${{ env.resources }} | jq -r '.create_s3')" \
          -var="create_autoscaling=$(echo ${{ env.resources }} | jq -r '.create_autoscaling')" \
          -var="ami_id=${{ github.event.inputs.ami_id }}" \
          -var="instance_type=${{ github.event.inputs.instance_type }}" \
          -var="subnet_id=${{ github.event.inputs.subnet_id }}" \
          -var="security_group_id=${{ github.event.inputs.security_group_id }}" \
          -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"

    - name: Terraform Apply or Destroy
      run: |
        if [[ "${{ github.event.inputs.action }}" == "apply" ]]; then
          terraform apply -auto-approve \
            -var="aws_region=${{ github.event.inputs.aws_region }}" \
            -var="create_vpc=$(echo ${{ env.resources }} | jq -r '.create_vpc')" \
            -var="create_ec2=$(echo ${{ env.resources }} | jq -r '.create_ec2')" \
            -var="create_s3=$(echo ${{ env.resources }} | jq -r '.create_s3')" \
            -var="create_autoscaling=$(echo ${{ env.resources }} | jq -r '.create_autoscaling')" \
            -var="ami_id=${{ github.event.inputs.ami_id }}" \
            -var="instance_type=${{ github.event.inputs.instance_type }}" \
            -var="subnet_id=${{ github.event.inputs.subnet_id }}" \
            -var="security_group_id=${{ github.event.inputs.security_group_id }}" \
            -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"
        elif [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
          terraform destroy -auto-approve \
            -var="aws_region=${{ github.event.inputs.aws_region }}" \
            -var="create_vpc=$(echo ${{ env.resources }} | jq -r '.create_vpc')" \
            -var="create_ec2=$(echo ${{ env.resources }} | jq -r '.create_ec2')" \
            -var="create_s3=$(echo ${{ env.resources }} | jq -r '.create_s3')" \
            -var="create_autoscaling=$(echo ${{ env.resources }} | jq -r '.create_autoscaling')" \
            -var="ami_id=${{ github.event.inputs.ami_id }}" \
            -var="instance_type=${{ github.event.inputs.instance_type }}" \
            -var="subnet_id=${{ github.event.inputs.subnet_id }}" \
            -var="security_group_id=${{ github.event.inputs.security_group_id }}" \
            -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"
